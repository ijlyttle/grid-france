{
  "hash": "362bf84b246741f73d81ecd277061c82",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Flow Ingest\n---\n\nThe goal of this pipeline is to update a parquet file with flow data from the French grid.\n\nThis is the **ingest** step:\n\n- Try to read a data file to get start date, use default otherwise.\n- Use minimum of today's date or start-date plus two weeks as end date.\n- Assemble query, execute for API\n\nThe flow data is available from 2014-12-16, onwards. \nHowever, given that the generation data are available starting 2017-01-01, we'll use that as a start date.\n\n::: {#7b546ad2 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport dvc.api\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nimport requests\nimport json\nimport functools, itertools\nimport polars as pl\nfrom pyprojroot.here import here\n```\n:::\n\n\nLet's determine the `start_date` and the `end_date` for the request:\n\n- the start date will be the larger of:\n\n  - 2017-01-01\n  - the end of the most-recent interval in the dataset\n\n- the end date will be the smaller of:\n  - the start date plus 14 days\n  - the current date\n\nDates are expressed as midnight, Paris time.\n\n\nThe timezone is a parameter that we share among multiple files in each of the pipelines. so we read a parameter:\n\n::: {#859cf6af .cell execution_count=2}\n``` {.python .cell-code}\nparams = dvc.api.params_show(\"dvc-params.yaml\")\n```\n:::\n\n\nThe timezone is a parameter that we share among multiple files in each of the pipelines. so we read a parameter:\n\nTo get the pipeline started, we read the published metadata, which contains the most-recent valid date.\nNote that although we are reading from this file, we not declare it a dependency in `dvc.yaml`.\nThis is because to declare this file would be to create a circular dependency, which DVC would refuse to accept.\n\n::: {#4f33360e .cell execution_count=3}\n``` {.python .cell-code}\ntz_local = ZoneInfo(params[\"tz_local\"])\n\n# not including this as a DVC dependency, as this would make things \"circular\"\nfile_transform_meta = here(\"data/99-publish/flow-meta.json\")\n\n# if file exists, get most-recent date\ndate_end_previous = None\nif os.path.isfile(file_transform_meta):\n    with open(file_transform_meta, \"r\") as file:\n        meta = json.load(file)\n        date_end_previous = datetime.fromisoformat(meta.get(\"interval_end\")).astimezone(\n            tz_local\n        )\n```\n:::\n\n\nLet's also get the current date (start of today, Paris time):\n\n::: {#adda6623 .cell execution_count=4}\n``` {.python .cell-code}\ndate_today = datetime.now(tz_local).replace(hour=0, minute=0, second=0, microsecond=0)\n```\n:::\n\n\nWe now have enough information to determine the start and end dates for the API call:\n\n::: {#72d7a775 .cell execution_count=5}\n``` {.python .cell-code}\n# timedelta() seems to use periods rather than intervals;\n# i.e., it takes DST into account and returns same wall-clock time.\n\ndate_start = datetime(2017, 1, 1, tzinfo=tz_local)\nif date_end_previous is not None:\n    date_start = date_end_previous\n\ndate_end = date_start + timedelta(days=14)\n\n# amend date_end if in the future\ndate_end = min(date_end, date_today)\n```\n:::\n\n\nGiven the context, here are the start and end dates:\n\n::: {#593a7903 .cell execution_count=6}\n``` {.python .cell-code}\nprint(date_start.isoformat())\nprint(date_end.isoformat())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2017-06-27T16:00:00+02:00\n2017-07-11T16:00:00+02:00\n```\n:::\n:::\n\n\nWe need to request a token:\n\n::: {#0174c5e0 .cell execution_count=7}\n``` {.python .cell-code}\nauth = requests.post(\n    \"https://digital.iservices.rte-france.com/token/oauth/\",\n    headers={\n        \"Authorization\": f'Basic {os.environ[\"RTE_FRANCE_BASE64\"]}',\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n)\ntoken = auth.json()[\"access_token\"]\n```\n:::\n\n\nWe compose a request, gather the response, then pull out the data:\n\n::: {#731502a2 .cell execution_count=8}\n``` {.python .cell-code}\nendpoint = \"https://digital.iservices.rte-france.com/open_api/physical_flow/v1/physical_flows\"\n\nresponse = requests.get(\n    f\"{endpoint}/?start_date={date_start.isoformat()}&end_date={date_end.isoformat()}\",\n    headers={\n        \"Host\": \"digital.iservices.rte-france.com\",\n        \"Authorization\": f\"Bearer {token}\",\n    },\n)\n```\n:::\n\n\nCheck the response:\n\n::: {#8aded132 .cell execution_count=9}\n``` {.python .cell-code}\nresponse.ok\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\nIf the response is OK, write out JSON content to file:\n\n::: {#2e83cfd8 .cell execution_count=10}\n``` {.python .cell-code}\nif response.ok:\n    array = response.json()[\"physical_flows\"]\n\n    with open(here(\"data/01-ingest/flow.json\"), \"w\") as file:\n        json.dump(array, file)\n```\n:::\n\n\n",
    "supporting": [
      "data-flow-01-ingest_files"
    ],
    "filters": [],
    "includes": {}
  }
}