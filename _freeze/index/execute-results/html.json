{
  "hash": "c7ad113439d3955759d8deb578b8f385",
  "result": {
    "markdown": "---\ntitle: France Grid\n---\n\nThe goal of this repository is to execute and document a data pipeline for aspects of the French electrical grid.\nThese are data made available publicly via [APIs from RTE France](https://data.rte-france.com/).\n\nI understand [RTE France's terms and conditions](https://data.rte-france.com/cgu) allow for republication, so long as the data are credited to RTE France, and are not distorted. \n\nWhen finished, this site will publish tables as parquet files:\n\n- generation sources, e.g. wind, solar\n- exchanges with other countries, e.g. England, Belgium\n- outdoor temperature in Paris (I know there's more to France than Paris)\n\nUsing GitHub Actions, these tables will be updated daily.\n\nThis will also be an opportunity for me to learn to use:\n\n- [Requests](https://requests.readthedocs.io/en/latest/)\n- [Polars](https://www.pola.rs/)\n- [DVC](https://dvc.org/)\n- [Quarto](https://quarto.org/) using Python with `.qmd` files\n\n## Secrets\n\nTo interact with the APIs and data-storage, the code in this report will expect certain environment variables to be set:\n\n- `AWS_ACCESS_KEY_ID`, `AWS_ACCESS_KEY_SECRET`: can also be set using `aws cli`\n- `RTE_FRANCE_BASE64` base-64 encoding available from RTE application-page\n\nThese allow you access to an application (that you will have to configure on your RTE France account); this application will need access to these APIs:\n\n- [Actual Generation](https://data.rte-france.com/catalog/-/api/generation/Actual-Generation/v1.1)\n- [Physical Flow](https://data.rte-france.com/catalog/-/api/exchanges/Physical-Flow/v1.0)\n\n## Data pipeline\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nfrom pyprojroot.here import here\nimport subprocess\n```\n:::\n\n\nThis flowchart is generated using DVC:\n\n```{mermaid}\nflowchart TD\n\tnode1[\"flow-ingest\"]\n\tnode2[\"generation-ingest\"]\n\tnode3[\"generation-publish\"]\n\tnode4[\"generation-transform\"]\n\tnode5[\"index\"]\n\tnode2-->node4\n\tnode3-->node5\n\tnode4-->node3\n\n```\n\n\n### Generation\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ngeneration = pl.read_parquet(here(\"data/99-publish/standard/generation.parquet\"))\n```\n:::\n\n\nTwo files parquet files are published, each with the same information:\n\n - [Standard](/data/99-publish/standard/generation.parquet)\n - [Fake-UTC](/data/99-publish/fake-utc/generation.parquet)\n\nThe last few observations:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ngeneration.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>type</th><th>interval_start</th><th>interval_end</th><th>generation</th></tr><tr><td>str</td><td>datetime[ms, Europe/Paris]</td><td>datetime[ms, Europe/Paris]</td><td>i64</td></tr></thead><tbody><tr><td>&quot;HYDRO&quot;</td><td>2017-11-18 23:45:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>279</td></tr><tr><td>&quot;NUCLEAR&quot;</td><td>2017-11-18 23:45:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>42391</td></tr><tr><td>&quot;PUMPING&quot;</td><td>2017-11-18 23:45:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>20</td></tr><tr><td>&quot;SOLAR&quot;</td><td>2017-11-18 23:45:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>0</td></tr><tr><td>&quot;WIND&quot;</td><td>2017-11-18 23:45:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>3559</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n- `type`: type of generation\n- `interval_start`, `interval_end`: date-times describing the interval\n- `generation`: average (?) of generation during this interval (MW)\n\nWe count the number of observations and null values for the generation files (will be the same for both):\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ngeneration.groupby(pl.col(\"type\")).agg(\n    pl.col(\"interval_start\").min(),\n    pl.col(\"interval_end\").max(),\n    pl.col(\"generation\").count().alias(\"n_observations\"),\n    pl.col(\"generation\").null_count().alias(\"n_value_null\"),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (10, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>type</th><th>interval_start</th><th>interval_end</th><th>n_observations</th><th>n_value_null</th></tr><tr><td>str</td><td>datetime[ms, Europe/Paris]</td><td>datetime[ms, Europe/Paris]</td><td>u32</td><td>u32</td></tr></thead><tbody><tr><td>&quot;FOSSIL_GAS&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;HYDRO&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30907</td><td>0</td></tr><tr><td>&quot;EXCHANGE&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;BIOENERGY&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;WIND&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;NUCLEAR&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;FOSSIL_HARD_COâ€¦</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;FOSSIL_OIL&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;SOLAR&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr><tr><td>&quot;PUMPING&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-11-19 00:00:00 CET</td><td>30908</td><td>0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nI don't know, right now, why `\"HYDRO\"` has one-fewer observation than the others - I'll try to find out!\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ngeneration.groupby(pl.col(\"interval_start\")).agg(\n    pl.col(\"generation\").count().alias(\"n_observations\")\n).sort(pl.col(\"n_observations\")).head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>interval_start</th><th>n_observations</th></tr><tr><td>datetime[ms, Europe/Paris]</td><td>u32</td></tr></thead><tbody><tr><td>2017-06-19 23:45:00 CEST</td><td>9</td></tr><tr><td>2017-03-12 15:15:00 CET</td><td>10</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nI don't think this was at the end of a API call...\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}