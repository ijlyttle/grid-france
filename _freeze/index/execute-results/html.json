{
  "hash": "07d0f3137f5636d416c5c9893e87ab20",
  "result": {
    "markdown": "---\ntitle: France Grid\n---\n\nThe goal of this repository is to execute and document a data pipeline for aspects of the French electrical grid.\nThese are data made available publicly via [APIs from RTE France](https://data.rte-france.com/).\n\nI understand [RTE France's terms and conditions](https://data.rte-france.com/cgu) allow for republication, so long as the data are credited to RTE France, and are not distorted. [Open-Meteo](https://open-meteo.com/) offers similar terms-of-use. This effort complies with those terms.\n\nWhen finished, this site will publish tables as parquet files:\n\n- generation sources, e.g. wind, solar\n- exchanges with other countries, e.g. England, Belgium\n- outdoor temperature in Paris, from [Open-Meteo](https://open-meteo.com/) (I know there's more to France than Paris)\n\nUsing GitHub Actions, these tables will be updated on a schedule, likely daily.\n\nThis will also be an opportunity for me to learn how to use\n\n- [Quarto](https://quarto.org/) with Python and Jupyter notebooks\n- [Requests](https://requests.readthedocs.io/en/latest/)\n- [Polars](https://www.pola.rs/)\n\n## Secrets\n\nTo interact with the APIs and data-storage, the code in this report will expect certain environment variables to be set:\n\n- `AWS_ACCESS_KEY_ID`, `AWS_ACCESS_KEY_SECRET`: can also be set using `aws cli`\n- `RTE_FRANCE_BASE64` base-64 encoding available from RTE application-page\n\nThese allow you access to an application (that you will have to configure on your RTE France account); this application will need access to these APIs:\n\n- [Actual Generation](https://data.rte-france.com/catalog/-/api/generation/Actual-Generation/v1.1)\n- [Physical Flow](https://data.rte-france.com/catalog/-/api/exchanges/Physical-Flow/v1.0)\n\n## Data available\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nfrom pyprojroot.here import here\nimport subprocess\n```\n:::\n\n\n### Generation\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ngeneration = pl.read_parquet(here(\"data/99-publish/standard/generation.parquet\"))\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ngeneration.drop_nulls().groupby(pl.col(\"type\")).agg(\n    pl.col(\"interval_start\").min(),\n    pl.col(\"interval_end\").max(),\n    pl.count(),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (10, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>type</th><th>interval_start</th><th>interval_end</th><th>count</th></tr><tr><td>str</td><td>datetime[ms, Europe/Paris]</td><td>datetime[ms, Europe/Paris]</td><td>u32</td></tr></thead><tbody><tr><td>&quot;FOSSIL_OIL&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;EXCHANGE&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;PUMPING&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;FOSSIL_HARD_CO…</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;FOSSIL_GAS&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;BIOENERGY&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;HYDRO&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;NUCLEAR&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;WIND&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr><tr><td>&quot;SOLAR&quot;</td><td>2017-01-01 00:00:00 CET</td><td>2017-01-15 00:00:00 CET</td><td>1344</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ngeneration_fake_utc = pl.read_parquet(\n    here(\"data/99-publish/fake-utc/generation.parquet\")\n)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ngeneration_fake_utc.drop_nulls().groupby(pl.col(\"type\")).agg(\n    pl.col(\"interval_start\").min(),\n    pl.col(\"interval_end\").max(),\n    pl.count(),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (10, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>type</th><th>interval_start</th><th>interval_end</th><th>count</th></tr><tr><td>str</td><td>datetime[ms, UTC]</td><td>datetime[ms, UTC]</td><td>u32</td></tr></thead><tbody><tr><td>&quot;BIOENERGY&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;NUCLEAR&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;EXCHANGE&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;FOSSIL_OIL&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;PUMPING&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;SOLAR&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;HYDRO&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;WIND&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;FOSSIL_HARD_CO…</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr><tr><td>&quot;FOSSIL_GAS&quot;</td><td>2017-01-01 00:00:00 UTC</td><td>2017-01-15 00:00:00 UTC</td><td>1344</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n``` {.python .cell-code}\nresult = subprocess.run([\"dvc\", \"dag\", \"--mermaid\"], stdout=subprocess.PIPE)\nprint(\"```{mermaid}\")\nprint(result.stdout.decode(\"utf-8\"))\nprint(\"```\")\n```\n```{mermaid}\nflowchart TD\n\tnode1[\"generation-ingest\"]\n\tnode2[\"generation-publish\"]\n\tnode3[\"generation-transform\"]\n\tnode4[\"index\"]\n\tnode1-->node3\n\tnode2-->node4\n\tnode3-->node2\n\n```\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}