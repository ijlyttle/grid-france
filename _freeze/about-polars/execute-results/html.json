{
  "hash": "efd3b6beedd69b3f0cc626d6ad89129f",
  "result": {
    "markdown": "---\ntitle: About Polars\nexecute: \n  freeze: auto\n---\n\nI have been interested to try out [Polars](https://www.pola.rs/) for some time now; it advertises \"blazingly-fast\" performance and is built on the Arrow ecosystem.\n\nTo be clear, the pipeline here does not require blazingly-fast performance, the data is small enough that I don't think I could tell. Instead, my goal is to see if I can wrap my head around the Polars API. Most of my experience is with R's [dplyr](https://dplyr.tidyverse.org/), some small experience with SQL, JS toolsets [arquero](https://uwdata.github.io/arquero) and [tidyjs](https://pbeshai.github.io/tidy/) (inspired by dplyr).\n\nConfession: I don't really know Pandas. I understand that indexes are an important feature of Pandas; [Polars does not use indexes](https://pola-rs.github.io/polars-book/user-guide/migration/pandas/#polars-does-not-have-a-multi-indexindex) (nor does dplyr). Thus, part of my enthusiasm for Polars may come from avoiding having to learn indexes (or unlearn them if I were coming from Pandas).\n\nIn short, I found I was able to do what I wanted to using Polars. Admittedly, I am not doing much, yet - but it was reassuring to make it this far.\n\nFor those coming from tidyverse, keep in mind that Polars runs `mutate()`-like calls in parallel. You might be accustomed to this:\n\n``` r\nlibrary(\"dplyr\")\n\nmtcars |>\n  mutate(\n    wt_metric_ton = wt / 2.205,\n    wt_kg = wt_metric_ton * 1000\n  )\n```\n\nIn Polars, you would need separate calls:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\n\npl.read_csv(\"https://gist.githubusercontent.com/ZeccaLehn/4e06d2575eb9589dbe8c365d61cb056c/raw/64f1660f38ef523b2a1a13be77b002b98665cdfe/mtcars.csv\").with_columns([(pl.col(\"wt\") / 2.205).alias(\"wt_metric_ton\")]).with_columns([(pl.col(\"wt_metric_ton\") * 1000).alias(\"wt_kg\")])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (32, 14)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th></th><th>mpg</th><th>cyl</th><th>disp</th><th>hp</th><th>drat</th><th>wt</th><th>qsec</th><th>vs</th><th>am</th><th>gear</th><th>carb</th><th>wt_metric_ton</th><th>wt_kg</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Mazda RX4&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.62</td><td>16.46</td><td>0</td><td>1</td><td>4</td><td>4</td><td>1.188209</td><td>1188.208617</td></tr><tr><td>&quot;Mazda RX4 Wag&quot;</td><td>21.0</td><td>6</td><td>160.0</td><td>110</td><td>3.9</td><td>2.875</td><td>17.02</td><td>0</td><td>1</td><td>4</td><td>4</td><td>1.303855</td><td>1303.854875</td></tr><tr><td>&quot;Datsun 710&quot;</td><td>22.8</td><td>4</td><td>108.0</td><td>93</td><td>3.85</td><td>2.32</td><td>18.61</td><td>1</td><td>1</td><td>4</td><td>1</td><td>1.052154</td><td>1052.154195</td></tr><tr><td>&quot;Hornet 4 Drive…</td><td>21.4</td><td>6</td><td>258.0</td><td>110</td><td>3.08</td><td>3.215</td><td>19.44</td><td>1</td><td>0</td><td>3</td><td>1</td><td>1.45805</td><td>1458.049887</td></tr><tr><td>&quot;Hornet Sportab…</td><td>18.7</td><td>8</td><td>360.0</td><td>175</td><td>3.15</td><td>3.44</td><td>17.02</td><td>0</td><td>0</td><td>3</td><td>2</td><td>1.560091</td><td>1560.090703</td></tr><tr><td>&quot;Valiant&quot;</td><td>18.1</td><td>6</td><td>225.0</td><td>105</td><td>2.76</td><td>3.46</td><td>20.22</td><td>1</td><td>0</td><td>3</td><td>1</td><td>1.569161</td><td>1569.160998</td></tr><tr><td>&quot;Duster 360&quot;</td><td>14.3</td><td>8</td><td>360.0</td><td>245</td><td>3.21</td><td>3.57</td><td>15.84</td><td>0</td><td>0</td><td>3</td><td>4</td><td>1.619048</td><td>1619.047619</td></tr><tr><td>&quot;Merc 240D&quot;</td><td>24.4</td><td>4</td><td>146.7</td><td>62</td><td>3.69</td><td>3.19</td><td>20.0</td><td>1</td><td>0</td><td>4</td><td>2</td><td>1.446712</td><td>1446.712018</td></tr><tr><td>&quot;Merc 230&quot;</td><td>22.8</td><td>4</td><td>140.8</td><td>95</td><td>3.92</td><td>3.15</td><td>22.9</td><td>1</td><td>0</td><td>4</td><td>2</td><td>1.428571</td><td>1428.571429</td></tr><tr><td>&quot;Merc 280&quot;</td><td>19.2</td><td>6</td><td>167.6</td><td>123</td><td>3.92</td><td>3.44</td><td>18.3</td><td>1</td><td>0</td><td>4</td><td>4</td><td>1.560091</td><td>1560.090703</td></tr><tr><td>&quot;Merc 280C&quot;</td><td>17.8</td><td>6</td><td>167.6</td><td>123</td><td>3.92</td><td>3.44</td><td>18.9</td><td>1</td><td>0</td><td>4</td><td>4</td><td>1.560091</td><td>1560.090703</td></tr><tr><td>&quot;Merc 450SE&quot;</td><td>16.4</td><td>8</td><td>275.8</td><td>180</td><td>3.07</td><td>4.07</td><td>17.4</td><td>0</td><td>0</td><td>3</td><td>3</td><td>1.845805</td><td>1845.804989</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Toyota Corona&quot;</td><td>21.5</td><td>4</td><td>120.1</td><td>97</td><td>3.7</td><td>2.465</td><td>20.01</td><td>1</td><td>0</td><td>3</td><td>1</td><td>1.117914</td><td>1117.913832</td></tr><tr><td>&quot;Dodge Challeng…</td><td>15.5</td><td>8</td><td>318.0</td><td>150</td><td>2.76</td><td>3.52</td><td>16.87</td><td>0</td><td>0</td><td>3</td><td>2</td><td>1.596372</td><td>1596.371882</td></tr><tr><td>&quot;AMC Javelin&quot;</td><td>15.2</td><td>8</td><td>304.0</td><td>150</td><td>3.15</td><td>3.435</td><td>17.3</td><td>0</td><td>0</td><td>3</td><td>2</td><td>1.557823</td><td>1557.823129</td></tr><tr><td>&quot;Camaro Z28&quot;</td><td>13.3</td><td>8</td><td>350.0</td><td>245</td><td>3.73</td><td>3.84</td><td>15.41</td><td>0</td><td>0</td><td>3</td><td>4</td><td>1.741497</td><td>1741.496599</td></tr><tr><td>&quot;Pontiac Firebi…</td><td>19.2</td><td>8</td><td>400.0</td><td>175</td><td>3.08</td><td>3.845</td><td>17.05</td><td>0</td><td>0</td><td>3</td><td>2</td><td>1.743764</td><td>1743.764172</td></tr><tr><td>&quot;Fiat X1-9&quot;</td><td>27.3</td><td>4</td><td>79.0</td><td>66</td><td>4.08</td><td>1.935</td><td>18.9</td><td>1</td><td>1</td><td>4</td><td>1</td><td>0.877551</td><td>877.55102</td></tr><tr><td>&quot;Porsche 914-2&quot;</td><td>26.0</td><td>4</td><td>120.3</td><td>91</td><td>4.43</td><td>2.14</td><td>16.7</td><td>0</td><td>1</td><td>5</td><td>2</td><td>0.970522</td><td>970.521542</td></tr><tr><td>&quot;Lotus Europa&quot;</td><td>30.4</td><td>4</td><td>95.1</td><td>113</td><td>3.77</td><td>1.513</td><td>16.9</td><td>1</td><td>1</td><td>5</td><td>2</td><td>0.686168</td><td>686.1678</td></tr><tr><td>&quot;Ford Pantera L…</td><td>15.8</td><td>8</td><td>351.0</td><td>264</td><td>4.22</td><td>3.17</td><td>14.5</td><td>0</td><td>1</td><td>5</td><td>4</td><td>1.437642</td><td>1437.641723</td></tr><tr><td>&quot;Ferrari Dino&quot;</td><td>19.7</td><td>6</td><td>145.0</td><td>175</td><td>3.62</td><td>2.77</td><td>15.5</td><td>0</td><td>1</td><td>5</td><td>6</td><td>1.256236</td><td>1256.235828</td></tr><tr><td>&quot;Maserati Bora&quot;</td><td>15.0</td><td>8</td><td>301.0</td><td>335</td><td>3.54</td><td>3.57</td><td>14.6</td><td>0</td><td>1</td><td>5</td><td>8</td><td>1.619048</td><td>1619.047619</td></tr><tr><td>&quot;Volvo 142E&quot;</td><td>21.4</td><td>4</td><td>121.0</td><td>109</td><td>4.11</td><td>2.78</td><td>18.6</td><td>1</td><td>1</td><td>4</td><td>2</td><td>1.260771</td><td>1260.770975</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Unpackaing API responses\n\nEach branch of the pipeline starts with an API call to get more-recent data, saved as a JSON file; this is the **ingest** step. In the **transform** step, the JSON is parsed as into a Python list, then wrangled into a standard tabular form.\n\nAs I am still finding my way in Python, I ended up using different approaches for each of the \"generation\" and \"flow\" stages.\n\n### Generation\n\nHere is an excerpt for the response from the generation API:\n\n``` json\n[\n  {\n    \"start_date\": \"2018-04-08T00:00:00+02:00\", \n    \"end_date\": \"2018-04-22T00:00:00+02:00\", \n    \"production_type\": \"BIOENERGY\", \n    \"production_subtype\": \"BIOGAS\", \n    \"values\": [\n      {\n        \"start_date\": \"2018-04-08T00:00:00+02:00\", \n        \"end_date\": \"2018-04-08T00:15:00+02:00\", \n        \"updated_date\": \"2018-04-08T23:53:25+02:00\", \n        \"value\": 222\n      }\n    ]\n  }\n]\n```\n\nThis is *heavily* edited. Each \"row\" in the response corresponds to one date for one production-type. Within each row is another data-frame-like structure for each 15-minute interval.\n\nMy approach here was to use functional programming tools, like `map()` and `reduce()`, to get things into a Python list with one entry for each combination of production-type and interval:\n\n``` python\nby_type = list(\n    map(\n        lambda x: list(\n            map(\n                lambda v: {\n                    \"type\": x[\"production_type\"],\n                    \"interval_start\": v[\"start_date\"],\n                    \"interval_end\": v[\"end_date\"],\n                    \"generation\": v[\"value\"],\n                },\n                x[\"values\"],\n            )\n        ),\n        array,\n    )\n)\n\nfixed = functools.reduce(itertools.chain, by_type)\n```\n\nThis resulted in a list that looked like this, of course with many more observations:\n\n``` json\n[\n  {\n    \"type\": \"BIOENERGY\",\n    \"interval_start\": \"2018-04-08T00:00:00+02:00\"\n    \"interval_end\": \"2018-04-08T00:15:00+02:00\"\n    \"generation\": 222\n  }\n]\n```\n\nAt this point, I could import such a list into a Polars `DataFrame`, then parse the date-times, etc.\n\n### Flow\n\nThe flow API returns a similar sort of response - again, heavily edited:\n\n``` json\n[\n  {\n    \"start_date\": \"2017-06-17T00:00:00+02:00\", \n    \"end_date\": \"2017-06-18T00:00:00+02:00\", \n    \"sender_country_eic_code\": \"10YCB-GERMANY--8\", \n    \"sender_country_name\": \"Germany\", \n    \"receiver_country_eic_code\": \"10YFR-RTE------C\", \n    \"receiver_country_name\": \"France\", \n    \"values\": [\n      {\n        \"start_date\": \"2017-06-17T00:00:00+02:00\", \n        \"end_date\": \"2017-06-17T01:00:00+02:00\", \n        \"value\": 320, \n        \"updated_date\": \"2017-06-17T00:00:00+02:00\"\n      }\n    ]\n  }\n]\n```\n\nFor this one, I decided to try a different approach. I decided to try to import the whole thing into a Polars `DataFrame`, which worked.\n\nThis presented a couple of challenges for which Polars presented straightforward solutions:\n\n-   the [.explode() method](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.explode.html) is used to promote the `\"value\"` elements to the top level, repeating the outer entries.\n-   the [`.unnest()` method](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.unnest.html) is used to spread the `\"value\"` entries into their own top-level columns.\n\nMaybe another way to put it: `.explode()` expands the square-bracket elements, `[]`, vertically; `.unnest()` expands the curly-bracket elements, `{}`, horizontally.\n\n``` python\ntable = (\n    pl.DataFrame(array)\n    .select(\n        [\n            pl.col(\"sender_country_name\").alias(\"sender\"),\n            pl.col(\"receiver_country_name\").alias(\"receiver\"),\n            pl.col(\"values\"),\n        ]\n    )\n    .explode(\"values\") # list of 24 hourly values\n    .unnest(\"values\")  # dict with start_date, end_date, value\n    .drop([\"updated_date\"])\n    .rename(\n        {\"start_date\": \"interval_start\", \"end_date\": \"interval_end\", \"value\": \"flow\"}\n    )\n)\n```\n\nOf course, such methods are available in tidyverse, and I am certain in Pandas, too. It was reassuring to see this in Polars.\n\n",
    "supporting": [
      "about-polars_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}