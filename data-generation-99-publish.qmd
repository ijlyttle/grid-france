---
title: Generation Publish
---


In the **publish** step

- Add to top-level `resources:` in YAML

```{python}
import os
import polars as pl
from pyprojroot.here import here
import json

```

```{python}
table = pl.read_parquet(here("data/02-transform/generation.parquet"))
```

```{python}
table_fake_utc = table.with_columns(
    pl.col(["interval_start", "interval_end"]).map(
        lambda x: x.dt.replace_time_zone(time_zone="UTC")
    ),
)
```

```{python}
path_standard = here("data/99-publish/standard")
os.makedirs(path_standard, exist_ok=True)
table.write_parquet(f"{path_standard}/generation.parquet")
```

```{python}
path_fake_utc = here("data/99-publish/fake-utc")
os.makedirs(path_fake_utc, exist_ok=True)
table_fake_utc.write_parquet(f"{path_fake_utc}/generation.parquet")
```

## Metadata

Some metadata:

 - `timezone`: should be `"Europe/Paris"`
 - `interval_end_minimum`: aggregated over type, last 

```{python}
time_zone = table.get_column("interval_start").dtype.time_zone
```

For each type, find the latest `interval_end` - then find the earliest among those; this is where the next query will need to start.

```{python}
interval_end = (
    table.groupby(pl.col("type"))
    .agg(pl.col("interval_end").max())
    .get_column("interval_end")
    .min()
)
```

We write this to a metadata file:

```{python}
dict = {"time_zone": time_zone, "interval_end": interval_end.isoformat()}

with open(here("data/99-publish/generation-meta.json"), "w") as file:
    json.dump(dict, file)
```
